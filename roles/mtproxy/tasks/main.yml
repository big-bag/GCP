---
- name: make CentOS 7 specific settings
  block:
    # https://github.com/TelegramMessenger/MTProxy
    - name: install packages
      yum:
        name: "{{ packages }}"
      vars:
        packages:
          - openssl-devel
          - zlib-devel

    - name: download sources
      git:
        repo: https://github.com/TelegramMessenger/MTProxy.git
        dest: /usr/local/src/MTProxy

    - name: check if binary was built
      stat:
        path: /usr/local/src/MTProxy/objs
      register: objs_dir

    - name: build
      make:
        chdir: /usr/local/src/MTProxy
      when: not (objs_dir.stat.exists and objs_dir.stat.isdir)

    # Obtain a secret, used to connect to telegram servers.
    - name: download a secret, used to connect to telegram servers
      get_url:
        url: https://core.telegram.org/getProxySecret
        dest: /usr/local/src/MTProxy/objs/bin/proxy-secret
        mode: 0644

    # Obtain current telegram configuration. It can change (occasionally), so we encourage you to update it once per day.
    - name: download current telegram configuration
      get_url:
        url: https://core.telegram.org/getProxyConfig
        dest: /usr/local/src/MTProxy/objs/bin/proxy-multi.conf
        mode: 0644

    - name: add cron to update telegram configuration everyday at 2 AM
      cron:
        name: "Update telegram configuration"
        minute: "0"
        hour: "2"
        job: "curl -L https://core.telegram.org/getProxyConfig -o /usr/local/src/MTProxy/objs/bin/proxy-multi.conf"
        state: present

    - name: check if secret to be used to connect to proxy generated
      stat:
        path: /usr/local/src/MTProxy/objs/bin/connect-secret
      register: connect_secret_file

    # Generate a secret to be used by users to connect to your proxy.
    - name: generate a secret
      shell: head -c 16 /dev/urandom | xxd -ps
      register: connect_secret_generated
      when: not connect_secret_file.stat.exists

    - name: save a secret to a file
      copy:
        content: "{{ connect_secret_generated.stdout }}"
        dest: /usr/local/src/MTProxy/objs/bin/connect-secret
        mode: 0644
      when: not connect_secret_file.stat.exists

    - name: refresh facts with latest information
      setup:

    - name: read a secret from a file (in base64)
      slurp:
        src: /usr/local/src/MTProxy/objs/bin/connect-secret
      register: connect_secret_b64

    - name: decode a secret from base64
      set_fact:
        connect_secret_decode: "{{ connect_secret_b64['content'] | b64decode }}"

    - name: create systemd service unit
      template:
        src: MTProxy.service.j2
        dest: /etc/systemd/system/MTProxy.service
      register: mtproxy_service

    - name: force systemd to reread configs
      systemd:
        daemon_reload: yes
      when: mtproxy_service.changed

    - name: start service and make it start on boot
      service:
        name: MTProxy
        state: started
        enabled: yes

    # Due to some ISPs detecting MTProxy by packet sizes, random padding is added to packets if such mode is enabled.
    # It's only enabled for clients which request it.
    # Add dd prefix to secret (cafe...babe => ddcafe...babe) to enable this mode on client side.
    - name: generate links to be used to connect to proxy
      set_fact:
        mtproxy_web_link: "https://t.me/proxy?server={{ mtproxy_address }}&port={{ mtproxy_port }}&secret=dd{{ connect_secret_decode }}"
        mtproxy_tg_link: "tg://proxy?server={{ mtproxy_address }}&port={{ mtproxy_port }}&secret=dd{{ connect_secret_decode }}"

    - name: print links
      debug:
        msg: |
          Link for browser: {{ mtproxy_web_link }}
          Direct link for Telegram app: {{ mtproxy_tg_link }}
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == '7'

- name: make Alpine specific settings
  block:
    # https://hub.docker.com/r/telegrammessenger/proxy/
    - name: install dependencies for docker module
      pip:
        name: docker
        executable: pip3

    - name: pull the telegram messenger mtproto image
      docker_image:
        name: telegrammessenger/proxy:1.3
        source: pull

    - name: run the telegram messenger mtproto proxy
      docker_container:
        name: mtproto-proxy
        image: telegrammessenger/proxy:1.3
        state: started
        restart_policy: on-failure # unless-stopped
#        restart: yes
        volumes:
          - proxy-config:/data
        ports:
          - "{{ mtproxy_port }}:443"
        env:
          SECRET: "{{ mtproxy_secret }}"
          WORKERS: "1"
  when: ansible_distribution == "Alpine" and ansible_distribution_major_version == '3'
