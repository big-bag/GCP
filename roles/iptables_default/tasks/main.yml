---
# http://blog.mailgun.com/security-guide-basic-infrastructure-security/
# http://security.blogoverflow.com/2011/08/base-rulesets-in-iptables/

# SHOW IPTABLES RULES IN ALL TABLES
# sudo iptables -L -v
# sudo iptables -t nat -L -v
# sudo iptables -t mangle -L -v

# SET THE DEFAULT POLICIES FOR ALL THREE DEFAULT CHAINS
- name: IPTABLES/IP6TABLES | default ACCEPT policy for ALL chains in FILTER table
  iptables:
    table: filter
    chain: "{{ item[0] }}"
    policy: ACCEPT
    ip_version: "{{ item[1] }}"
  with_nested:
  - [ 'INPUT', 'FORWARD', 'OUTPUT' ]
  - [ 'ipv4', 'ipv6' ]
  tags:
  - flush_rules
  - always

# FLUSH ALL THE CHAINS IN THE TABLE
- name: IPTABLES/IP6TABLES | FLUSH OLD RULES, OLD CUSTOM TABLES
  iptables:
    table: "{{ item[0] }}"
    flush: yes
    ip_version: "{{ item[1] }}"
  with_nested:
  - [ 'filter', 'nat', 'mangle' ]
  - [ 'ipv4', 'ipv6' ]
  tags:
  - flush_rules
  - always

# CREATE SCRIPT IN /root DIRECTORY TO MANUAL FLUSH IPTABLES RULES
- name: IPTABLES | fw.stop FILE CREATE
  template:
    src: fw.stop.j2
    dest: /root/fw.stop
    owner: root
    group: root
    mode: 0755
  tags:
  - default_rules
  - always

- name: IPTABLES | HOST INTERFACE FIND
  setup:
    filter: ansible_default_ipv4.interface
  tags:
  - default_rules
  - always

# ONLY ACCEPT LOOPBACK TRAFFIC ORIGINATING FROM LOCALHOST
- name: IPTABLES | ALLOW free use of LOOPBACK interface
  iptables:
    table: filter
    action: append
    chain: INPUT
    in_interface: lo
    jump: ACCEPT
  tags:
  - default_rules
  - always

- iptables:
    table: filter
    action: append
    chain: INPUT
    in_interface: ! lo
    source: 127.0.0.0/8
    jump: REJECT
  tags:
  - default_rules
  - always

- iptables:
    table: filter
    action: append
    chain: OUTPUT
    out_interface: lo
    jump: ACCEPT
  tags:
  - default_rules
  - always

# LEAVE ESTABLISHED CONNECTIONS OPEN (LIKE CURRENT SSH)
- name: IPTABLES | ALLOW ESTABLISHED and RELATED connections
  iptables:
    table: filter
    action: append
    chain: INPUT
    match: state
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  tags:
  - default_rules
  - always

- name: IPTABLES | ALLOW ICMP IN
  iptables:
    table: filter
    action: append
    chain: INPUT
    protocol: icmp
    match: icmp
    icmp_type: "{{ item }}"
    limit: 1/second
    jump: ACCEPT
  with_items:
  - echo-request
  - fragmentation-needed
  - source-quench
  tags:
  - default_rules
  - always

- iptables:
    table: filter
    action: append
    chain: OUTPUT
    protocol: icmp
    jump: ACCEPT
  tags:
  - default_rules
  - always

- name: IPTABLES | ALLOW SSH IN (TCP/22)
  iptables:
    table: filter
    action: append
    chain: INPUT
    in_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: tcp
    match: state
    ctstate: NEW,ESTABLISHED
    destination_port: 22
    jump: ACCEPT
  tags:
  - default_rules
  - always

- iptables:
    table: filter
    action: append
    chain: OUTPUT
    out_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: tcp
    match: state
    ctstate: ESTABLISHED
    source_port: 22
    jump: ACCEPT
  tags:
  - default_rules
  - always

# ALLOW DNS TRAFFIC GO THROUGH VPN SERVER
- name: IPTABLES | ALLOW DNS OUT (TCP/53, UDP/53), NTP OUT (TCP/123, UDP/123)
  iptables:
    table: filter
    action: append
    chain: INPUT
    in_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: "{{ item[0] }}"
    match: state
    ctstate: ESTABLISHED
    source_port: "{{ item[1] }}"
    jump: ACCEPT
  with_nested:
  - [ 'tcp', 'udp' ]
  - [ '53', '123' ]
  tags:
  - default_rules
  - always

- iptables:
    table: filter
    action: append
    chain: OUTPUT
    out_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: "{{ item[0] }}"
    match: state
    ctstate: NEW,ESTABLISHED
    destination_port: "{{ item[1] }}"
    jump: ACCEPT
  with_nested:
  - [ 'tcp', 'udp' ]
  - [ '53', '123' ]
  tags:
  - default_rules
  - always

# THESE RULES ALLOW SERVER TO INITIATE HTTP REQUESTS (FROM SERVER), BUT NOT RECEIVE THEM FROM OUTSIDE
# TO BE ABLE SERVER TO UPDATE ITSELF
- name: IPTABLES | ALLOW HTTP OUT (TCP/80), HTTPS OUT (TCP/443)
  iptables:
    table: filter
    action: append
    chain: INPUT
    in_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: tcp
    match: state
    ctstate: ESTABLISHED
    source_port: "{{ item }}"
    jump: ACCEPT
  with_items:
  - 80
  - 443
  tags:
  - default_rules
  - always

- iptables:
    table: filter
    action: append
    chain: OUTPUT
    out_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: tcp
    match: state
    ctstate: NEW,ESTABLISHED
    destination_port: "{{ item }}"
    jump: ACCEPT
  with_items:
  - 80
  - 443
  tags:
  - default_rules
  - always

- name: IPTABLES | RUN TASKS FROM IPTABLES SERVICES ROLE
  include_role:
    name: vpn_iptables_services
  tags:
  - services

- name: IPTABLES | LOG BLOCKED TRAFFIC
  iptables:
    table: filter
    action: append
    chain: "{{ item }}"
    match: limit
    limit: 3/minute
    jump: LOG
    log_prefix: "iptables_{{ item }}_denied: "
  with_items:
  - INPUT
  - FORWARD
  - OUTPUT
  tags:
  - default_rules
  - always

# SET THE DEFAULT POLICIES FOR ALL THREE DEFAULT CHAINS
- name: IPTABLES/IP6TABLES | default DROP policy for ALL chains in FILTER table
  iptables:
    table: filter
    chain: "{{ item[0] }}"
    policy: DROP
    ip_version: "{{ item[1] }}"
  with_nested:
#  - [ 'INPUT', 'FORWARD', 'OUTPUT' ]
  - [ 'INPUT', 'FORWARD' ]
  - [ 'ipv4', 'ipv6' ]
  tags:
  - default_rules
  - always

- name: PACKAGES | INSTALL
  yum:
    name: "{{ packages_install }}"
    state: installed
  tags:
  - save_rules
  - always

- name: IPTABLES/IP6TABLES | SAVE RULES
  shell: "{{ item }}-save > /etc/sysconfig/{{ item }}"
  with_items:
  - iptables
  - ip6tables
  tags:
  - save_rules
  - always

- name: IPTABLES/IP6TABLES | SERVICE ENABLE
  service:
    name: "{{ item }}"
    enabled: yes
  with_items:
  - iptables
  - ip6tables
  tags:
  - save_rules
  - always
