---
- name: IPTABLES SERVICES | HOST INTERFACE FIND
  setup:
    filter: ansible_default_ipv4.interface
  tags:
  - router
  - smtp
  - client
  - rdp

- name: IPTABLES SERVICES | SET FACTS FOR TUN INTERFACES
  set_fact:
    tun_interface_router: "{{ item[0] }}"
    tun_interface_client: "{{ item[1] }}"
    tun_interface_stunnel: "{{ item[2] }}"
  with_nested:
  - "{{ ovpn_server_instance.0.tun_interface }}"
  - "{{ ovpn_server_instance.1.tun_interface }}"
  - "{{ ovpn_server_instance.2.tun_interface }}"
  tags:
  - router
  - smtp
  - client
  - rdp

- name: IPTABLES SERVICES | SET FACTS FOR NETWORKS
  set_fact:
    network_router: "{{ item[0] }}"
    network_client: "{{ item[1] }}"
  with_nested:
  - "{{ ovpn_server_instance.0.network }}"
  - "{{ ovpn_server_instance.1.network }}"
  tags:
  - router
  - smtp
  - client

# OPEN PORTS TO ESTABLISH CONNECTIONS TO OPENVPN ANS STUNNEL SERVICES
# TCP/1194 - OPENVPN FOR ROUTERS
# TCP/8443 - STUNNEL FOR RDP CLIENTS
# TCP/9443 - FOR MTPROXY CLIENTS
- name: IPTABLES SERVICES | ACCEPT INPUT FOR OPENVPN TCP, STUNNEL
  iptables:
    table: filter
    action: append
    chain: INPUT
    in_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: "{{ item[0] }}"
    match: state
    ctstate: NEW,ESTABLISHED
    destination_port: "{{ item[1] }}"
    jump: ACCEPT
  with_nested:
  - [ 'tcp' ]
  - [ '1194', '8443', '9443' ]
  tags:
  - router
  - smtp
  - rdp
  - mtproxy

- iptables:
    table: filter
    action: append
    chain: OUTPUT
    out_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: "{{ item[0] }}"
    match: state
    ctstate: ESTABLISHED
    source_port: "{{ item[1] }}"
    jump: ACCEPT
  with_nested:
  - [ 'tcp' ]
  - [ '1194', '8443', '9443' ]
  tags:
  - router
  - smtp
  - rdp
  - mtproxy

# OPEN PORTS TO ESTABLISH CONNECTIONS TO OPENVPN ANS STUNNEL SERVICES
# UDP/1194 - OPENVPN FOR CLIENTS
- name: IPTABLES SERVICES | ACCEPT INPUT OPENVPN UDP
  iptables:
    table: filter
    action: append
    chain: INPUT
    in_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: "{{ item[0] }}"
    match: state
    ctstate: NEW,ESTABLISHED
    destination_port: "{{ item[1] }}"
    jump: ACCEPT
  with_nested:
  - [ 'udp' ]
  - [ '1194' ]
  tags:
  - client

- iptables:
    table: filter
    action: append
    chain: OUTPUT
    out_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: "{{ item[0] }}"
    match: state
    ctstate: ESTABLISHED
    source_port: "{{ item[1] }}"
    jump: ACCEPT
  with_nested:
  - [ 'udp' ]
  - [ '1194' ]
  tags:
  - client

- name: IPTABLES SERVICES | ALLOW free use of TUN interfaces
  iptables:
    table: filter
    action: append
    chain: INPUT
    in_interface: tun+
    jump: ACCEPT
  tags:
  - client
  - rdp

- iptables:
    table: filter
    action: append
    chain: FORWARD
    in_interface: tun+
    jump: ACCEPT
  tags:
  - client
  - rdp

- iptables:
    table: filter
    action: append
    chain: OUTPUT
    out_interface: tun+
    jump: ACCEPT
  tags:
  - client
  - rdp

# FORWARD INCOMING TRAFFIC FROM INTERNET TO INTERNAL SERVICES
# SMTP (TCP/25) - FROM INTERNET TO INTERNAL MAIL SERVER
# IMAPS (TCP/993) - FROM INTERNET TO INTERNAL NGINX
# SMTPS (TCP/465) - FROM INTERNET TO INTERNAL NGINX
# HTTP (TCP/80) - FROM INTERNET TO INTERNAL NGINX
# HTTPS (TCP/443) - FROM INTERNET TO INTERNAL NGINX
# tun_interface_router - INTERFACE OF ROUTER FROM WHICH REQUESTS ARE GOING TO SERVER
- name: IPTABLES SERVICES | FORWARD INCOMING TRAFFIC FROM INTERNET TO INTERNAL SERVICES
  iptables:
    table: nat
    action: append
    chain: PREROUTING
    in_interface: "{{ ansible_default_ipv4.interface }}"
    protocol: tcp
    destination_port: "{{ item[1] }}"
    jump: DNAT
    to_destination: "{{ item[0].ip_client }}:{{ item[1] }}"
  with_nested:
  - "{{ ovpn_server_instance.0.device }}"
  - [ '25', '993', '465', '80', '443' ]
  tags:
  - smtp

- iptables:
    table: filter
    action: append
    chain: FORWARD
    in_interface: "{{ ansible_default_ipv4.interface }}"
    out_interface: "{{ tun_interface_router }}"
    protocol: tcp
    syn: match
    destination: "{{ item[0].ip_client }}"
    destination_port: "{{ item[1] }}"
    match: state
    ctstate: NEW
    jump: ACCEPT
  with_nested:
  - "{{ ovpn_server_instance.0.device }}"
  - [ '25', '993', '465', '80', '443' ]
  tags:
  - smtp

- iptables:
    table: filter
    action: append
    chain: FORWARD
    in_interface: "{{ ansible_default_ipv4.interface }}"
    out_interface: "{{ tun_interface_router }}"
    destination: "{{ item.ip_client }}"
    match: state
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  with_items: "{{ ovpn_server_instance.0.device }}"
  tags:
  - smtp

- iptables:
    table: filter
    action: append
    chain: FORWARD
    in_interface: "{{ tun_interface_router }}"
    out_interface: "{{ ansible_default_ipv4.interface }}"
    source: "{{ item.ip_client }}"
    match: state
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  with_items: "{{ ovpn_server_instance.0.device }}"
  tags:
  - smtp

- iptables:
    table: nat
    action: append
    chain: POSTROUTING
    out_interface: "{{ tun_interface_router }}"
    protocol: tcp
    destination_port: "{{ item[1] }}"
    destination: "{{ item[0].ip_client }}"
    jump: SNAT
    to_source: "{{ item[0].ip_server }}"
  with_nested:
  - "{{ ovpn_server_instance.0.device }}"
  - [ '25', '993', '465', '80', '443' ]
  tags:
  - smtp

# ALLOW HTTP AND HTTPS ORIGINATED FROM VPN CLIENTS WHICH DEFAULT GATEWAY
# INTERFACE IS IP-ADDRESS OF VPS SERVER (VPS AS DEFAULT ROUTE) SUCH AS
# CLIENTS OF OVPN UDP INSTANCE (FOR EXAMPLE, mobile_01)
- name: IPTABLES SERVICES | FORWARD INCOMING HTTP/HTTPS FROM OVPN UDP CLIENTS TO INTERNAL SERVICES
  iptables:
    table: nat
    action: append
    chain: PREROUTING
    source: 0.0.0.0/0
    in_interface: "{{ tun_interface_client }}"
    protocol: tcp
    destination: "{{ ansible_default_ipv4.address }}"
    destination_port: "{{ item[1] }}"
    jump: DNAT
    to_destination: "{{ item[0].ip_client }}:{{ item[1] }}"
  with_nested:
  - "{{ ovpn_server_instance.0.device }}"
  - [ '80', '443' ]
  tags:
  - smtp

# ENABLE FORWARDING FROM tun TO PHYSICAL NETWORK INTERFACE TO FORWARD TRAFFIC TO THE INTERNET
# USING FOR OVPN CLIENTS (WHO CONNECTS OVER UDP/1194) TO ALLOW THEM TO GO TO INTERNET THROUGH VPN SERVER
# USING FOR MAIL SERVERS TO ALLOW SMTP OUT (TCP/25) FROM INTERNAL SERVER TO INTERNET
- name: IPTABLES SERVICES | ALLOW FORWARD FROM tun TO INTERNET
  iptables:
    table: filter
    action: append
    chain: FORWARD
    match: conntrack
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  tags:
  - router
  - smtp
  - client

- name: IPTABLES SERVICES | FORWARD OUT TRAFFIC FROM CLIENTS/SMTP TO INTERNET
  iptables:
    table: filter
    action: append
    chain: FORWARD
    in_interface: "{{ item[0] }}"
    out_interface: "{{ ansible_default_ipv4.interface }}"
#    source: "{{ item[1] }}/24"
    jump: ACCEPT
  with_nested:
  - [ '{{ tun_interface_router }}', '{{ tun_interface_client }}' ]
  - [ '{{ network_router }}', '{{ network_client }}' ]
  tags:
  - router
  - smtp
  - client

# NAT RULE TO MAKE TRAFFIC FROM THE VPN MASQUARADE AS TRAFFIC FROM THE PHYSICAL NETWORK INTERFACE
- iptables:
    table: nat
    action: append
    chain: POSTROUTING
    out_interface: "{{ ansible_default_ipv4.interface }}"
#    source: "{{ item }}/24"
    jump: SNAT
    to_source: "{{ ansible_default_ipv4.address }}"
  with_items:
  - "{{ network_router }}"
  - "{{ network_client }}"
  tags:
  - router
  - smtp
  - client

# FORWARD INCOMING RDP (TCP/3389) FROM CLIENT DEVICE TO INTERNAL SERVER
# tun_interface_stunnel - INTERFACE OF CLIENT DEVICES WHICH RECIEVES REQUESTS
# tun_interface_router - INTERFACE OF ROUTER FROM WHICH REQUESTS ARE GOING TO SERVER
- name: IPTABLES RDP | FORWARD RDP/IN TO SERVER
  iptables:
    table: filter
    action: append
    chain: FORWARD
    in_interface: "{{ tun_interface_stunnel }}"
    out_interface: "{{ tun_interface_router }}"
    protocol: tcp
    syn: match
    destination_port: 3389
    match: conntrack
    ctstate: NEW
    jump: ACCEPT
  tags:
  - rdp

- iptables:
    table: filter
    action: append
    chain: FORWARD
    in_interface: "{{ tun_interface_stunnel }}"
    out_interface: "{{ tun_interface_router }}"
    match: conntrack
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  tags:
  - rdp

- iptables:
    table: filter
    action: append
    chain: FORWARD
    in_interface: "{{ tun_interface_router }}"
    out_interface: "{{ tun_interface_stunnel }}"
    match: conntrack
    ctstate: ESTABLISHED,RELATED
    jump: ACCEPT
  tags:
  - rdp

- iptables:
    table: nat
    action: append
    chain: PREROUTING
    in_interface: "{{ tun_interface_stunnel }}"
    protocol: tcp
    destination_port: "{{ item[1] }}"
    jump: DNAT
    to_destination: "{{ item[0].ip_client }}:{{ item[1] }}"
  with_nested:
  - "{{ ovpn_server_instance.0.device }}"
  - [ '3389' ]
  tags:
  - rdp

- iptables:
    table: nat
    action: append
    chain: POSTROUTING
    out_interface: "{{ tun_interface_router }}"
    protocol: tcp
    destination_port: "{{ item[1] }}"
    destination: "{{ item[0].ip_client }}"
    jump: SNAT
    to_source: "{{ item[0].ip_server }}"
  with_nested:
  - "{{ ovpn_server_instance.0.device }}"
  - [ '3389' ]
  tags:
  - rdp
